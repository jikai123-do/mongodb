<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

<!--指定欢迎页面-->
<welcome-file-list>
<welcome-file>index.jsp</welcome-file>
</welcome-file-list>

  <!--1、在web.xnl配置监听器ContextLoaderListener-->
  <!--ContextLoaderListener的作用(一句话):初始化BeanFactory，并将BeanFactory设置到application中-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>

  <!--2、部署applicationContext的x1文件歌认的路径是”/WEB-INF/applicationContext.xn1,如果是要自定义文件名可以在web.xml里加入
  contextConfigLocation这个context参效:在(paran-value)</param-value>
        里指定相应的xml文件名，如果有多个nl文件，可以写在一起并以“”号分隔也可以这样applicationContext-*x采用通配符，-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring.xml</param-value>
  </context-param>

  <!--Spring log4j Config loader-->
    <!--java.lang.ClassNotFoundException: org.springframework.web.util.Log4jConfigListener
      发现从Spring 4.2.1开始，已删除Log4jConfigListener，支持Apache Log4j 2，官方说明
     所以我们需要引入log4j的jar，注意是apache.logging 下的，版本自定义，在pom.xml加入依赖-->
  <!--<listener>-->
   <!--<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>-->
  <!--</listener>-->

    <listener>
        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
    </listener>

    <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
    </context-param>

      <!--使用Spring VC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,所以可以配置多个DispatcherServlet-->
  <servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <!--是启动顺序，让这个Servlet随Servletp容器一起启动。-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>


  <!-- 在Spring框架中是如何解决从页面传来的字符串的编码问题的呢?下面我们来看看Spring框架给我们提供过滤器CharacterEncodingFilter这个过滤器
  就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。其中encoding用来设置编码格式，
  forceEncoding用来设置是否理会 request,getCharacterEncoding0方法，设置为true刚强制覆盖之前日-->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
<error-page>
  <!--当系统出现404错误，跳转到页面nopage.htm1-->
  <error-code>404</error-code>
  <location>/noPage.jsp</location>
  </error-page>
<session-config>
  <!--会话超时配置，单位分钟-->
  <session-timeout>360</session-timeout>
</session-config>
</web-app>